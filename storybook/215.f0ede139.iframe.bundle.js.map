{"version":3,"file":"215.f0ede139.iframe.bundle.js","mappings":";;AA2BA;AACA;AACA;;;AAgBA;;;;AAKA;AACA;;;;;;;;;;;;AA4BA","sources":["webpack://react-payments/./node_modules/@solo5star/react-modal/dist/esm/index.js"],"sourcesContent":["import { jsx, jsxs, Fragment } from 'react/jsx-runtime';\nimport { styled, createGlobalStyle } from 'styled-components';\nimport ReactDOM from 'react-dom';\nimport { useEffect } from 'react';\n\nconst Backdrop = styled.div`\n  background-color: rgba(0, 0, 0, 0.4);\n`;\nconst ModalBackdrop = (props) => {\n  const { onClick, className } = props;\n  return /* @__PURE__ */ jsx(Backdrop, { onClick, className });\n};\n\nconst getAlignSelf = (placement) => {\n  if (placement === \"top\")\n    return \"flex-start\";\n  if (placement === \"bottom\")\n    return \"flex-end\";\n  return \"center\";\n};\nconst getJustifySelf = (placement) => {\n  if (placement === \"left\")\n    return \"flex-start\";\n  if (placement === \"right\")\n    return \"flex-end\";\n  return \"center\";\n};\nconst Content = styled.article`\n  align-self: ${(props) => getAlignSelf(props.$placement)};\n  justify-self: ${(props) => getJustifySelf(props.$placement)};\n\n  z-index: 1;\n`;\nconst ModalContent = (props) => {\n  const { placement = \"center\", className, children } = props;\n  return /* @__PURE__ */ jsx(Content, { $placement: placement, className, children });\n};\n\nconst useKeyEvent = (eventType, handler) => {\n  useEffect(() => {\n    document.addEventListener(`key${eventType}`, handler);\n    return () => document.removeEventListener(`key${eventType}`, handler);\n  });\n};\n\nconst PreventBodyScroll = createGlobalStyle`\n  body {\n    overflow: hidden;\n  }\n`;\nconst Root = styled.div`\n  display: ${(props) => props.$open ? \"grid\" : \"none\"};\n\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 1000;\n\n  & > * {\n    grid-area: 1 / 1 / 1 / 1;\n  }\n`;\nconst ModalRoot = (props) => {\n  const { open, onClose, className, children } = props;\n  useKeyEvent(\"down\", (event) => {\n    if (event.key === \"Escape\")\n      onClose == null ? void 0 : onClose();\n  });\n  return ReactDOM.createPortal(\n    /* @__PURE__ */ jsxs(Fragment, { children: [\n      open && /* @__PURE__ */ jsx(PreventBodyScroll, {}),\n      /* @__PURE__ */ jsx(Root, { $open: open, className, children })\n    ] }),\n    document.body\n  );\n};\n\nconst Modal = {\n  Root: ModalRoot,\n  Backdrop: ModalBackdrop,\n  Content: ModalContent\n};\n\nexport { Modal };\n"],"names":[],"sourceRoot":""}